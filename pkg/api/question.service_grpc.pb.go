// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: question.service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuestionServiceClient is the client API for QuestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionServiceClient interface {
	GetQuestion(ctx context.Context, in *GetQuestionReq, opts ...grpc.CallOption) (*Question, error)
	GetProfileQuestions(ctx context.Context, in *GetProfileQuestionsReq, opts ...grpc.CallOption) (QuestionService_GetProfileQuestionsClient, error)
	CreateQuestion(ctx context.Context, in *CreateQuestionReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteQuestion(ctx context.Context, in *DeleteQuestionReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type questionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionServiceClient(cc grpc.ClientConnInterface) QuestionServiceClient {
	return &questionServiceClient{cc}
}

func (c *questionServiceClient) GetQuestion(ctx context.Context, in *GetQuestionReq, opts ...grpc.CallOption) (*Question, error) {
	out := new(Question)
	err := c.cc.Invoke(ctx, "/app.sinope.grpc_api.v1.service.QuestionService/GetQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) GetProfileQuestions(ctx context.Context, in *GetProfileQuestionsReq, opts ...grpc.CallOption) (QuestionService_GetProfileQuestionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &QuestionService_ServiceDesc.Streams[0], "/app.sinope.grpc_api.v1.service.QuestionService/GetProfileQuestions", opts...)
	if err != nil {
		return nil, err
	}
	x := &questionServiceGetProfileQuestionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QuestionService_GetProfileQuestionsClient interface {
	Recv() (*Question, error)
	grpc.ClientStream
}

type questionServiceGetProfileQuestionsClient struct {
	grpc.ClientStream
}

func (x *questionServiceGetProfileQuestionsClient) Recv() (*Question, error) {
	m := new(Question)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *questionServiceClient) CreateQuestion(ctx context.Context, in *CreateQuestionReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/app.sinope.grpc_api.v1.service.QuestionService/CreateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/app.sinope.grpc_api.v1.service.QuestionService/DeleteQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionServiceServer is the server API for QuestionService service.
// All implementations must embed UnimplementedQuestionServiceServer
// for forward compatibility
type QuestionServiceServer interface {
	GetQuestion(context.Context, *GetQuestionReq) (*Question, error)
	GetProfileQuestions(*GetProfileQuestionsReq, QuestionService_GetProfileQuestionsServer) error
	CreateQuestion(context.Context, *CreateQuestionReq) (*emptypb.Empty, error)
	DeleteQuestion(context.Context, *DeleteQuestionReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedQuestionServiceServer()
}

// UnimplementedQuestionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuestionServiceServer struct {
}

func (UnimplementedQuestionServiceServer) GetQuestion(context.Context, *GetQuestionReq) (*Question, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) GetProfileQuestions(*GetProfileQuestionsReq, QuestionService_GetProfileQuestionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProfileQuestions not implemented")
}
func (UnimplementedQuestionServiceServer) CreateQuestion(context.Context, *CreateQuestionReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) DeleteQuestion(context.Context, *DeleteQuestionReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) mustEmbedUnimplementedQuestionServiceServer() {}

// UnsafeQuestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionServiceServer will
// result in compilation errors.
type UnsafeQuestionServiceServer interface {
	mustEmbedUnimplementedQuestionServiceServer()
}

func RegisterQuestionServiceServer(s grpc.ServiceRegistrar, srv QuestionServiceServer) {
	s.RegisterService(&QuestionService_ServiceDesc, srv)
}

func _QuestionService_GetQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.sinope.grpc_api.v1.service.QuestionService/GetQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetQuestion(ctx, req.(*GetQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_GetProfileQuestions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProfileQuestionsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuestionServiceServer).GetProfileQuestions(m, &questionServiceGetProfileQuestionsServer{stream})
}

type QuestionService_GetProfileQuestionsServer interface {
	Send(*Question) error
	grpc.ServerStream
}

type questionServiceGetProfileQuestionsServer struct {
	grpc.ServerStream
}

func (x *questionServiceGetProfileQuestionsServer) Send(m *Question) error {
	return x.ServerStream.SendMsg(m)
}

func _QuestionService_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.sinope.grpc_api.v1.service.QuestionService/CreateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).CreateQuestion(ctx, req.(*CreateQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.sinope.grpc_api.v1.service.QuestionService/DeleteQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).DeleteQuestion(ctx, req.(*DeleteQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionService_ServiceDesc is the grpc.ServiceDesc for QuestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.sinope.grpc_api.v1.service.QuestionService",
	HandlerType: (*QuestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuestion",
			Handler:    _QuestionService_GetQuestion_Handler,
		},
		{
			MethodName: "CreateQuestion",
			Handler:    _QuestionService_CreateQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _QuestionService_DeleteQuestion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetProfileQuestions",
			Handler:       _QuestionService_GetProfileQuestions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "question.service.proto",
}
